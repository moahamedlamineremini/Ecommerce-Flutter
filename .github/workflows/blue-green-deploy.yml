name: Firebase Blue-Green Deployment

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

# Permissions nécessaires pour l'action Firebase Hosting Deploy
permissions:
  contents: read
  checks: write
  pull-requests: write
  statuses: write

env:
  FLUTTER_VERSION: '3.35.4'  # Version Flutter qui contient Dart 3.9+
  DART_VERSION: '3.9.0'      # Version Dart de référence
  FIREBASE_PROJECT_ID: 'ecommerce-55dd8-4d606'

jobs:
  test:
    name: Run Tests & Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Disable Flutter analytics
        run: flutter config --no-analytics

      - name: Generate Firebase options
        run: |
          # Créer le fichier firebase_options.dart depuis l'exemple pour éviter les erreurs de compilation
          cp lib/firebase_options_example.dart lib/firebase_options.dart

      - name: Get dependencies
        run: flutter pub get

      - name: Verify Dart version
        run: dart --version

      - name: Check Dart/Flutter configuration
        run: |
          flutter doctor -v
          flutter --version

      - name: Dart format check
        run: dart format --output=none --set-exit-if-changed .

      - name: Flutter analyze
        run: flutter analyze --fatal-infos

      - name: Run Flutter tests with coverage
        run: flutter test --coverage --test-randomize-ordering-seed random

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: Build Flutter Web App
    runs-on: ubuntu-latest
    needs: test
    outputs:
      build-success: ${{ steps.build-status.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Disable Flutter analytics
        run: flutter config --no-analytics

      - name: Generate Firebase options
        run: |
          cp lib/firebase_options_example.dart lib/firebase_options.dart

      - name: Get dependencies
        run: flutter pub get

      - name: Build Flutter Web (Release)
        run: flutter build web --release

      - name: Verify build output
        id: build-status
        run: |
          if [ -d "build/web" ] && [ -f "build/web/index.html" ] && [ -f "build/web/main.dart.js" ]; then
            echo "✅ Build successful - all required files present"
            echo "success=true" >> $GITHUB_OUTPUT
            ls -la build/web/
          else
            echo "❌ Build failed - missing required files"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-web-build
          path: build/web/
          retention-days: 5

  deploy-preview:
    name: Deploy to Preview Channel (Blue/Green)
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'pull_request' || github.ref == 'refs/heads/develop') && needs.build.outputs.build-success == 'true'
    outputs:
      preview-url: ${{ steps.deploy.outputs.details_url }}
      channel: ${{ steps.determine-channel.outputs.channel }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: flutter-web-build
          path: build/web/

      - name: Determine deployment channel
        id: determine-channel
        run: |
          if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "channel=blue" >> $GITHUB_OUTPUT
            echo "🔵 Deploying to BLUE channel (develop branch)"
          else
            echo "channel=green" >> $GITHUB_OUTPUT
            echo "🟢 Deploying to GREEN channel (pull request)"
          fi

      - name: Deploy to Firebase Hosting Preview Channel
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ECOMMERCE_55DD8_4D606 }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: ${{ steps.determine-channel.outputs.channel }}
          expires: 30d

      - name: Post deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Channel**: ${{ steps.determine-channel.outputs.channel }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy.outputs.details_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Expires**: 30 days" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: ${{ env.FIREBASE_PROJECT_ID }}" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const channel = '${{ steps.determine-channel.outputs.channel }}';
            const url = '${{ steps.deploy.outputs.details_url }}';
            const emoji = channel === 'blue' ? '🔵' : '🟢';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${emoji} **Preview deployed** (Channel: \`${channel}\`)\n\n🌍 **URL**: ${url}\n\n✨ Test your changes before merging!\n\n---\n*Deployment expires in 30 days*`
            });

      - name: Run Load Tests on Deployed Channel
        run: |
          # Installer Artillery pour les tests de charge
          npm install -g artillery
          
          # Créer un test de charge simple pour le canal déployé
          cat > channel-smoke-test.yml << 'EOF'
          config:
            target: '${{ steps.deploy.outputs.details_url }}'
            phases:
              - duration: 60
                arrivalRate: 2
                name: "Smoke test du canal déployé"
          scenarios:
            - name: "Test basique du canal"
              flow:
                - get:
                    url: "/"
                    expect:
                      - statusCode: [200, 301, 302]
                - think: 2
          EOF
          
          # Exécuter le test de charge
          echo "🔥 Lancement du test de charge sur le canal ${{ steps.determine-channel.outputs.channel }}"
          artillery run channel-smoke-test.yml
          
          echo "✅ Test de charge terminé pour le canal ${{ steps.determine-channel.outputs.channel }}"

  deploy-production:
    name: Deploy to Production (Live)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && needs.build.outputs.build-success == 'true'
    environment:
      name: production
      url: https://${{ env.FIREBASE_PROJECT_ID }}.web.app
    outputs:
      production-url: https://${{ env.FIREBASE_PROJECT_ID }}.web.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: flutter-web-build
          path: build/web/

      - name: Deploy to Firebase Hosting Production
        id: deploy-prod
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ECOMMERCE_55DD8_4D606 }}
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: live

      - name: Post production deployment summary
        run: |
          echo "## 🎉 Production Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "- **Live URL**: https://${{ env.FIREBASE_PROJECT_ID }}.web.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Firebase Console**: https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_ID }}/hosting" >> $GITHUB_STEP_SUMMARY

  smoke-tests:
    name: Run Smoke Tests (Production)
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Artillery for Production Load Tests
        run: |
          npm install -g artillery

      - name: Run Production Load Tests
        run: |
          # Créer un test de charge pour la production
          cat > production-smoke-test.yml << 'EOF'
          config:
            target: 'https://${{ env.FIREBASE_PROJECT_ID }}.web.app'
            phases:
              - duration: 60
                arrivalRate: 3
                name: "Production smoke test"
          scenarios:
            - name: "Production load test"
              flow:
                - get:
                    url: "/"
                    expect:
                      - statusCode: [200, 301, 302]
                - think: 2
          EOF
          
          echo "🔥 Lancement du test de charge sur la production"
          artillery run production-smoke-test.yml
          echo "✅ Test de charge production terminé avec succès"
          echo "🌍 Production URL: https://${{ env.FIREBASE_PROJECT_ID }}.web.app"

  promote-channel:
    name: Promote Channel to Live (Manual)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: promotion
      url: https://${{ env.FIREBASE_PROJECT_ID }}.web.app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate with Firebase
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ECOMMERCE_55DD8_4D606 }}
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_ECOMMERCE_55DD8_4D606 }}' > $HOME/firebase-key.json
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/firebase-key.json

      - name: List available channels
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/firebase-key.json
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_ECOMMERCE_55DD8_4D606 }}' > ${{ runner.temp }}/firebase-key.json
          firebase hosting:channel:list --project ${{ env.FIREBASE_PROJECT_ID }}

      - name: Promote channel (Interactive)
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/firebase-key.json
        run: |
          echo "🔄 Manual promotion workflow triggered"
          echo "Available commands:"
          echo "  firebase hosting:clone ${{ env.FIREBASE_PROJECT_ID }}:blue ${{ env.FIREBASE_PROJECT_ID }}:live"
          echo "  firebase hosting:clone ${{ env.FIREBASE_PROJECT_ID }}:green ${{ env.FIREBASE_PROJECT_ID }}:live"
          echo ""
          echo "Use the Firebase Console for manual promotion:"
          echo "https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_ID }}/hosting"

  status-check:
    name: Deployment Status Check
    runs-on: ubuntu-latest
    if: always()
    needs: [test, build, deploy-preview, deploy-production]
    steps:
      - name: Generate deployment status report
        run: |
          echo "## 📊 Deployment Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests & Analysis | ${{ needs.test.result }} | Dart format, Flutter analyze, tests |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result }} | Flutter Web build |" >> $GITHUB_STEP_SUMMARY
          echo "| Preview Deploy | ${{ needs.deploy-preview.result }} | Blue/Green channels |" >> $GITHUB_STEP_SUMMARY
          echo "| Production Deploy | ${{ needs.deploy-production.result }} | Live channel |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Firebase Console](https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_ID }}/hosting)" >> $GITHUB_STEP_SUMMARY
          echo "- [Production Site](https://${{ env.FIREBASE_PROJECT_ID }}.web.app)" >> $GITHUB_STEP_SUMMARY
